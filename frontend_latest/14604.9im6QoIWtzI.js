export const id=14604;export const ids=[14604];export const modules={10469:(e,t,r)=>{r.d(t,{$:()=>o});r(89655);const o=(e,t)=>{const r={};for(const o of e){const e=t(o);e in r?r[e].push(o):r[e]=[o]}return r}},47076:(e,t,r)=>{r.a(e,(async(e,o)=>{try{r.d(t,{AN:()=>N,B2:()=>M,BV:()=>C,DR:()=>G,E$:()=>j,GW:()=>P,KJ:()=>K,Q4:()=>E,RB:()=>D,WN:()=>x,X4:()=>X,_d:()=>I,al:()=>V,bs:()=>O,c:()=>S,gv:()=>Y,m7:()=>T,oU:()=>W,tb:()=>F,uh:()=>z,yM:()=>R});r(89655),r(253),r(54846),r(16891);var n=r(31195),s=r(77301),a=r(91103),i=r(39902),c=r(72730),l=r(61310),g=r(31293),_=r(63165),y=r(60132),u=r(83324),d=r(84280),f=r(94100),p=r(78691),h=r(41924),m=r(10469),b=r(31265),w=r(4826),v=e([p,h]);[p,h]=v.then?(await v)():v;const k=[],T=()=>({stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),D=()=>({stat_energy_to:"",stat_compensation:null,entity_energy_price:null,number_energy_price:null}),z=()=>({type:"grid",flow_from:[],flow_to:[],cost_adjustment_day:0}),E=()=>({type:"solar",stat_energy_from:"",config_entry_solar_forecast:null}),W=()=>({type:"battery",stat_energy_from:"",stat_energy_to:""}),S=()=>({type:"gas",stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),P=()=>({type:"water",stat_energy_from:"",stat_cost:null,entity_energy_price:null,number_energy_price:null}),C=e=>e.callWS({type:"energy/info"}),M=async e=>(await e.loadBackendTranslation("issues","energy"),e.callWS({type:"energy/validate"})),O=e=>e.callWS({type:"energy/get_prefs"}),x=async(e,t)=>{const r=e.callWS({type:"energy/save_prefs",...t});return B(e),r},A=async(e,t,r,o,n,s="hour")=>e.callWS({type:"energy/fossil_energy_consumption",start_time:t.toISOString(),end_time:n?.toISOString(),energy_statistic_ids:r,co2_statistic_id:o,period:s}),j=e=>(0,m.$)(e.energy_sources,(e=>e.type)),N=(e,t,r)=>{const o=[];for(const n of e.energy_sources)if(!r||r.includes(n.type))if("solar"!==n.type)if("gas"!==n.type&&"water"!==n.type)if("battery"!==n.type){for(const e of n.flow_from){o.push(e.stat_energy_from),e.stat_cost&&o.push(e.stat_cost);const r=t.cost_sensors[e.stat_energy_from];r&&o.push(r)}for(const e of n.flow_to){o.push(e.stat_energy_to),e.stat_compensation&&o.push(e.stat_compensation);const r=t.cost_sensors[e.stat_energy_to];r&&o.push(r)}}else o.push(n.stat_energy_from),o.push(n.stat_energy_to);else{o.push(n.stat_energy_from),n.stat_cost&&o.push(n.stat_cost);const e=t.cost_sensors[n.stat_energy_from];e&&o.push(e)}else o.push(n.stat_energy_from);return r&&!r.includes("device")||o.push(...e.device_consumption.map((e=>e.stat_consumption))),o},$=async(e,t,r,o,_)=>{const[y,u]=await Promise.all([(0,b.VN)(e,{domain:"co2signal"}),C(e)]),d=y.length?y[0]:void 0;let f;if(d)for(const t of Object.values(e.entities)){if("co2signal"!==t.platform)continue;const r=e.states[t.entity_id];if(r&&"%"===r.attributes.unit_of_measurement){f=r.entity_id;break}}const h=[];for(const e of t.energy_sources)if("grid"===e.type)for(const t of e.flow_from)h.push(t.stat_energy_from);const m=N(t,u,["grid","solar","battery","gas","device"]),v=N(t,u,["water"]),k=[...m,...v],T=(0,n.c)(o||new Date,r),D=T>35?"month":T>2?"day":"hour",z=e.config.unit_system.length||"",E={energy:"kWh",volume:"km"===z?"m続":"ft続"},W={volume:"km"===z?"L":"gal"},S=m.length?(0,w.sz)(e,r,o,m,D,E,["change"]):{},P=v.length?(0,w.sz)(e,r,o,v,D,W,["change"]):{};let M,O,x,j,$,B={},L={};_&&(O=(0,p.xo)(r,s.e,e.locale,e.config)&&(0,p.xo)(o||new Date,a.c,e.locale,e.config)?(0,p.ol)(r,i.P,e.locale,e.config,-(0,p.EO)(o||new Date,r,c.W,e.locale,e.config)-1):(0,p.ol)(r,l.f,e.locale,e.config,-1*(T+1)),x=(0,g.A)(r,-1),m.length&&(B=(0,w.sz)(e,O,x,m,D,E,["change"])),v.length&&(L=(0,w.sz)(e,O,x,v,D,W,["change"]))),void 0!==f&&(j=A(e,r,h,f,o,T>35?"month":T>2?"day":"hour"),_&&($=A(e,O,h,f,x,T>35?"month":T>2?"day":"hour")));const F={},V=k.length?(0,w.Wr)(e,k):[],[H,I,K,R,X,Y,q]=await Promise.all([S,P,B,L,V,j,$]),G={...H,...I};_&&(M={...K,...R}),k.length&&X.forEach((e=>{F[e.statistic_id]=e}));return{start:r,end:o,startCompare:O,endCompare:x,info:u,prefs:t,stats:G,statsMetadata:F,statsCompare:M,co2SignalConfigEntry:d,co2SignalEntity:f,fossilEnergyConsumption:Y,fossilEnergyConsumptionCompare:q}},B=e=>{k.forEach((t=>{const r=F(e,{key:t});r.clearPrefs(),r._active&&r.refresh()}))},L=e=>{if(e._refreshTimeout&&clearTimeout(e._refreshTimeout),e._active&&(!e.end||e.end>new Date)){const t=new Date;t.getMinutes()>=20&&t.setHours(t.getHours()+1),t.setMinutes(20,0,0),e._refreshTimeout=window.setTimeout((()=>e.refresh()),t.getTime()-Date.now())}},F=(e,t={})=>{let r="_energy";if(t.key){if(!t.key.startsWith("energy_"))throw new Error("Key need to start with energy_");r=`_${t.key}`}if(e.connection[r])return e.connection[r];k.push(t.key);const o=(0,d.X)(e.connection,r,(async()=>(o.prefs||(o.prefs=await O(e)),L(o),$(e,o.prefs,o.start,o.end,o.compare)))),n=o.subscribe;o.subscribe=e=>{const t=n(e);return o._active++,void 0===o._refreshTimeout&&L(o),()=>{o._active--,o._active<1&&(clearTimeout(o._refreshTimeout),o._refreshTimeout=void 0),t()}},o._active=0,o.prefs=t.prefs;const s=new Date,a=(0,h.LW)(s,e.locale,e.config).split(":")[0];o.start=(0,p.ol)("0"===a?(0,l.f)(s,-1):s,_.o,e.locale,e.config),o.end=(0,p.ol)("0"===a?(0,l.f)(s,-1):s,y.D,e.locale,e.config);const i=()=>{o._updatePeriodTimeout=window.setTimeout((()=>{o.start=(0,p.ol)(new Date,_.o,e.locale,e.config),o.end=(0,p.ol)(new Date,y.D,e.locale,e.config),i()}),(0,u.L)((0,p.ol)(s,y.D,e.locale,e.config),1).getTime()-Date.now())};return i(),o.clearPrefs=()=>{o.prefs=void 0},o.setPeriod=(t,r)=>{o.start=t,o.end=r,o.start.getTime()!==(0,p.ol)(new Date,_.o,e.locale,e.config).getTime()||o.end?.getTime()!==(0,p.ol)(new Date,y.D,e.locale,e.config).getTime()||o._updatePeriodTimeout?o._updatePeriodTimeout&&(clearTimeout(o._updatePeriodTimeout),o._updatePeriodTimeout=void 0):i()},o.setCompare=e=>{o.compare=e},o},V=e=>e.callWS({type:"energy/solar_forecast"}),H=["volume","energy"],I=(e,t={},r)=>{for(const o of e.energy_sources){if("gas"!==o.type)continue;if(r&&r===o.stat_energy_from)continue;const e=t[o.stat_energy_from];if(H.includes(e?.unit_class))return e.unit_class}},K=(e,t,r={})=>{const o=I(t,r);if(void 0!==o)return"energy"===o?"kWh":"km"===e.config.unit_system.length?"m続":"ft続"},R=e=>"km"===e.config.unit_system.length?"L":"gal",X="/docs/energy/faq/#troubleshooting-missing-entities",Y=(0,f.A)((e=>({summedData:q(e),compareSummedData:e.statsCompare?q(e,!0):void 0}))),q=(e,t)=>{const r={};for(const t of e.prefs.energy_sources)if("solar"!==t.type)if("battery"!==t.type){if("grid"===t.type){for(const e of t.flow_from)r.from_grid?r.from_grid.push(e.stat_energy_from):r.from_grid=[e.stat_energy_from];for(const e of t.flow_to)r.to_grid?r.to_grid.push(e.stat_energy_to):r.to_grid=[e.stat_energy_to]}}else r.to_battery?(r.to_battery.push(t.stat_energy_to),r.from_battery.push(t.stat_energy_from)):(r.to_battery=[t.stat_energy_to],r.from_battery=[t.stat_energy_from]);else r.solar?r.solar.push(t.stat_energy_from):r.solar=[t.stat_energy_from];const o={};return Object.entries(r).forEach((([r,n])=>{const s={},a={};n.forEach((r=>{const o=t?e.statsCompare[r]:e.stats[r];if(!o)return;o.forEach((e=>{if(null===e.change||void 0===e.change)return;const t=e.change;s[e.start]=e.start in s?s[e.start]+t:t})),a[r]={}})),o[r]=s})),o},G=(0,f.A)(((e,t)=>({consumption:J(e),compareConsumption:t?J(t):void 0}))),J=e=>{const t={total:{}};return Object.keys(e).forEach((r=>{Object.keys(e[r]).forEach((r=>{if(void 0===t.total[r]){const o=(e.from_grid?.[r]||0)+(e.solar?.[r]||0)+(e.from_battery?.[r]||0)-(e.to_grid?.[r]||0)-(e.to_battery?.[r]||0);t.total[r]=o}}))})),t};o()}catch(e){o(e)}}))},14604:(e,t,r)=>{r.a(e,(async(e,o)=>{try{r.r(t),r.d(t,{EnergyViewStrategy:()=>g});var n=r(36312),s=(r(89655),r(253),r(94438),r(4525),r(50289)),a=r(29818),i=r(47076),c=e([i]);i=(c.then?(await c)():c)[0];const l=async()=>(await Promise.all([r.e(58587),r.e(93725)]).then(r.bind(r,93725)),{type:"panel",cards:[{type:"custom:energy-setup-wizard-card"}]});let g=(0,n.A)([(0,a.EM)("energy-view-strategy")],(function(e,t){return{F:class extends t{constructor(...t){super(...t),e(this)}},d:[{kind:"method",static:!0,key:"generate",value:async function(e,t){const r={cards:[]};let o;try{o=await(0,i.bs)(t)}catch(e){return"not_found"===e.code?l():(r.cards.push({type:"markdown",content:`An error occurred while fetching your energy preferences: ${e.message}.`}),r)}if(0===o.device_consumption.length&&0===o.energy_sources.length)return l();r.type="sidebar";const n=o.energy_sources.find((e=>"grid"===e.type&&(e.flow_from?.length||e.flow_to?.length))),s=n&&n.flow_to.length,a=o.energy_sources.some((e=>"solar"===e.type)),c=o.energy_sources.some((e=>"gas"===e.type)),g=o.energy_sources.some((e=>"water"===e.type));return r.cards.push({type:"energy-compare",collection_key:"energy_dashboard"}),n&&r.cards.push({title:t.localize("ui.panel.energy.cards.energy_usage_graph_title"),type:"energy-usage-graph",collection_key:"energy_dashboard"}),a&&r.cards.push({title:t.localize("ui.panel.energy.cards.energy_solar_graph_title"),type:"energy-solar-graph",collection_key:"energy_dashboard"}),c&&r.cards.push({title:t.localize("ui.panel.energy.cards.energy_gas_graph_title"),type:"energy-gas-graph",collection_key:"energy_dashboard"}),g&&r.cards.push({title:t.localize("ui.panel.energy.cards.energy_water_graph_title"),type:"energy-water-graph",collection_key:"energy_dashboard"}),n&&r.cards.push({title:t.localize("ui.panel.energy.cards.energy_distribution_title"),type:"energy-distribution",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),(n||a||c||g)&&r.cards.push({title:t.localize("ui.panel.energy.cards.energy_sources_table_title"),type:"energy-sources-table",collection_key:"energy_dashboard"}),s&&r.cards.push({type:"energy-grid-neutrality-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),a&&s&&(r.cards.push({type:"energy-solar-consumed-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),r.cards.push({type:"energy-self-sufficiency-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"})),n&&r.cards.push({type:"energy-carbon-consumed-gauge",view_layout:{position:"sidebar"},collection_key:"energy_dashboard"}),o.device_consumption.length&&(r.cards.push({title:t.localize("ui.panel.energy.cards.energy_devices_detail_graph_title"),type:"energy-devices-detail-graph",collection_key:"energy_dashboard"}),r.cards.push({title:t.localize("ui.panel.energy.cards.energy_devices_graph_title"),type:"energy-devices-graph",collection_key:"energy_dashboard"})),r}}]}}),s.mN);o()}catch(e){o(e)}}))},24226:(e,t,r)=>{r.d(t,{z:()=>n});var o=r(30429);function n(e,t){const r=(0,o.a)(e),n=(0,o.a)(t),s=r.getTime()-n.getTime();return s<0?-1:s>0?1:s}},72730:(e,t,r)=>{r.d(t,{W:()=>i});var o=r(24226),n=r(30429);function s(e,t){const r=(0,n.a)(e),o=(0,n.a)(t);return 12*(r.getFullYear()-o.getFullYear())+(r.getMonth()-o.getMonth())}var a=r(91103);function i(e,t){const r=(0,n.a)(e),i=(0,n.a)(t),c=(0,o.z)(r,i),l=Math.abs(s(r,i));let g;if(l<1)g=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-c*l);let t=(0,o.z)(r,i)===-c;(0,a.c)((0,n.a)(e))&&1===l&&1===(0,o.z)(e,i)&&(t=!1),g=c*(l-Number(t))}return 0===g?0:g}},77301:(e,t,r)=>{r.d(t,{e:()=>n});var o=r(30429);function n(e){return 1===(0,o.a)(e).getDate()}},91103:(e,t,r)=>{r.d(t,{c:()=>a});var o=r(60132),n=r(12152),s=r(30429);function a(e){const t=(0,s.a)(e);return+(0,o.D)(t)==+(0,n.p)(t)}}};
//# sourceMappingURL=14604.9im6QoIWtzI.js.map